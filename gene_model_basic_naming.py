#! python3
# gene_model_basic_naming
# Simple program to assign non-redundant and basic names to gene models predicted by AUGUSTUS
# The result will be in the format "PREFIX{1-9999+}_t{iso#}"

import os, argparse

##### USER INPUT SECTION

usage = """%(prog)s reads in a provided fasta file generated by AUGUSTUS and gives the gene models
new, basic names in the format "PREFIX{1-9999+}_t{iso#}" where PREFIX is specified by you.
"""
p = argparse.ArgumentParser(description=usage)
p.add_argument("-i", "--input", dest="input",
                  help="Fasta file name")
p.add_argument("-p", "--prefix", dest="prefix",
                  help="Identifier prefix")
p.add_argument("-o", "--output", dest="output",
                  help="Output file name")

# Parse arguments
args = p.parse_args()
inName = args.input
prefix = args.prefix
outName = args.output

##### CORE PROCESS

# Change gene model names
ongoingCount = 0
with open(inName, 'rU') as inFile, open(outName, 'w') as outFile, open(outName + '_mapping', 'w') as outMap:
        for line in inFile:
                line = line.rstrip('\n').rstrip('\r')
                if line.startswith('>'):
                        oldId = line[1:].split('.')
                        if oldId[1] == 't1':            # AUGUSTUS output files are ordered, thus if we see a gene with '.t2' suffix, it will have the same gene number as the previous entry which will have '.t1' suffix
                                ongoingCount += 1
                        newId = '>' + prefix + str(ongoingCount) + '_' + oldId[1]
                        outFile.write(newId + '\n')
                        outMap.write(line[1:] + '\t' + newId[1:] + '\n')
                else:
                        outFile.write(line + '\n')
# Done!
